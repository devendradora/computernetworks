//Housy game ..Assuming there are 30 numbers with judge

#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <unistd.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <string.h>
#include <pthread.h>
#include <linux/ip.h>
#include <netdb.h>
#include <arpa/inet.h>
#define DEST "127.0.0.1"

using namespace std;

int rsfd1,rsfd2;
struct sockaddr_in local,foreign;
int input[30] = {0};
int input_count = 0;


void* sender(void *ptr);
void *receiver(void *ptr);



int main()
{
	if((rsfd1=socket(AF_INET,SOCK_RAW,144))<0)
	{
		perror("rsfd1 error\n");
	}
 //cout<<rsfd1<<endl;
	if((rsfd2=socket(AF_INET,SOCK_RAW,144))<0)
	{
		perror("rsfd2 error\n");
	}
	int optval=1;
	const int *val=&optval;
	if(setsockopt(rsfd1,IPPROTO_IP, IP_HDRINCL, val, sizeof(optval))<0)
	{
		perror("setsockopt error\n");
		exit(0);
	}
 /*if(setsockopt(rsfd2,IPPROTO_IP, IP_HDRINCL, val, sizeof(optval))<0)
 {
   printf("setsockopt error\n");
   exit(0);
 }*/

   memset(&local,0,sizeof(struct sockaddr_in));
   memset(&foreign,0,sizeof(struct sockaddr_in));
   local.sin_family=AF_INET;
   inet_pton(AF_INET, DEST, (struct in_addr *)&local.sin_addr.s_addr);
   local.sin_port=htons(0);
 /*if(bind(rsfd1,(struct sockaddr*)&local,sizeof(struct sockaddr_in))<0)
 {
      printf("bind error\n");exit(0);
 }
 foreign.sin_family=AF_INET;
 foreign.sin_addr.s_addr=INADDR_ANY;
 /*if(connect(rsfd2,(struct sockaddr*)&foreign,sizeof(struct sockaddr_in))<0)
 {
     printf("connect error\n");exit(0);
 }*/
     pthread_t tid1,tid2;
     pthread_create(&tid1,NULL,sender,NULL);
     pthread_create(&tid2,NULL,receiver,NULL);
     pthread_join(tid1,NULL);
     return 0;
 }


 void* sender(void *ptr)
 {
 	char packet[50];char buf[30];

 	struct iphdr *ip = (struct iphdr *)packet;  
 	ip->version = 4;
 	ip->ihl = 5;
 	ip->tos = 0;
	ip->tot_len = htons(40);	/* 16 byte value */

    /*ip->idenification number is autogenerated */
	ip->frag_off = 0;		/* no fragment */

	ip->ttl = 64;			/* default value */
	ip->protocol = 145;	/* protocol at L4 */
	ip->check = 0;			/* not needed in iphdr */

 	ip->saddr =local.sin_addr.s_addr;
 	ip->daddr = local.sin_addr.s_addr;

 	while(1) {
 		sleep(1);
 		memset(buf,0,30);
 		cout<<"enter the number 1 to 30:\n";
 		scanf("%s",buf);
 		input[input_count++] = atoi(buf);

                //strcpy(packet+sizeof(struct iphdr),buf);
 		for(int i=0;i<strlen(buf);i++)
 			*(packet+sizeof(struct iphdr)+i)=buf[i];
 		ip->tot_len=htons(sizeof(struct iphdr)+strlen(buf));
 		if (sendto(rsfd1, (char *)packet,sizeof(struct iphdr)+strlen(buf), 0, 
 			(struct sockaddr *)&local, (socklen_t)sizeof(local)) < 0)
 			perror("packet send error:");
 	}
 }

 void *receiver(void *ptr)
 {
 	sleep(1); 
 	char packet[200];
 	struct iphdr *ip;
 	socklen_t len=sizeof(struct sockaddr_in);
 	int check[4], check_count=0;
 	while(1)
 	{

 		int n=recvfrom(rsfd2,(char*)&packet,sizeof(packet),0,(struct sockaddr *)&foreign,(socklen_t *)&len);
 		if(n>0)
 		{
 			ip=(struct iphdr*)packet;
 			
 			char tpbuf[3] = {'\0'};
 			int k = 0;
 			for(int i=sizeof(struct iphdr)+8;i<n;i++)
 			{
 				if(packet[i] == '-')
 				{
 					check[check_count++] = atoi(tpbuf);
 					memset(tpbuf,0,3);
 					k=0;
 				}
 				else
 					tpbuf[k++] = packet[i];
 			}
 			int flag = 0;
 			for(int j=0;j<check_count;j++)
 			{
 				int lop  = 0;
 				for(int lop=0;lop<input_count;lop++)
 				{
 					if(check[j] == input[lop])
 						break;
 				}
 				if(lop>=input_count)
 					flag = 1;
 			}
 			if(flag == 0)
 			{
 				for(int i=sizeof(struct iphdr);i<n;i++)
 					cout<<packet[i];
 			}
 			cout<<endl;
 		}
 	}
 }
